//import 'package:english_words/english_words.dart' as english_words;
import 'package:flutter/material.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart' as path_provider;

import 'data/dua_category_item.dart' show DuaCatergoryItem, DuaCatergoryItemAdapter;

// We use built_value and hive_generator to make serializable data class.
/* Content of the "./data/dua_category_item.dart" file:
import 'package:hive/dua_category_item.dart';

// Generated by `flutter packages pub run build_runner build`.
part 'todo_item.g.dart';

@HiveType(typeId: 0)
class TodoItem extends HiveObject {
  @HiveField(0)
  int id;
  @HiveField(1)
  String content;
  @HiveField(2)
  bool isDone;
  @HiveField(3)
  final DateTime createdAt;

  TodoItem({this.id, this.content, this.isDone = false, createdAt})
      : this.createdAt = createdAt ?? DateTime.now();

  @override
  String toString() {
    return 'TodoItem(id=$id, content=$content, idDone=$isDone, createdAt=$createdAt)';
  }
} */

class HiveExample extends StatefulWidget {
  const HiveExample({Key? key}) : super(key: key);

  @override
  _HiveExampleState createState() => _HiveExampleState();
}

class _HiveExampleState extends State<HiveExample> {
  static const kHiveFolder = 'hive';
  static const kHiveBoxName = 'todosBox';

  late Future<bool> initDbFuture;

  @override
  void initState() {
    super.initState();
    this.initDbFuture = this.initDb();
    (() async {
      await _addTodoItem(
        DuaCatergoryItem(
          name: 'aa1',
          duaNameList: [],
          time: 10,
          totalDua: 10,
        ),
      );
      await _addTodoItem(
        DuaCatergoryItem(
          name: 'aa2',
          duaNameList: [],
          time: 10,
          totalDua: 10,
        ),
      );
      await _addTodoItem(
        DuaCatergoryItem(
          name: 'aa3',
          duaNameList: [],
          time: 10,
          totalDua: 10,
        ),
      );
      await _addTodoItem(
        DuaCatergoryItem(
          name: 'aa4',
          duaNameList: [],
          time: 10,
          totalDua: 10,
        ),
      );


    });
  }

  // Initializes the hive DB, once done the hive operations are *synchronous*.
  Future<bool> initDb() async {
    // Initialize hive.
    final dir = await path_provider.getApplicationDocumentsDirectory();
    final hiveFolder = join(dir.path, kHiveFolder);
    Hive.init(hiveFolder);
    try {
      // Normally we should register this at the app startup (i.e. in main.dart),
      // putting it here might cuase the line to run twice and lead to errors
      // since this page can be opened twice.
      Hive.registerAdapter(DuaCatergoryItemAdapter());
    } on Exception catch (e) {
      print(e);
    }
    // Open the hive box so that we can later call Hive.box(<name>) to use it.
    await Hive.openBox<DuaCatergoryItem>(kHiveBoxName);
    final List<DuaCatergoryItem> todos = _getTodoItems();
    print('Hive initialization done, todo items in the db are:');
    todos.forEach(print);
    return true;
  }

  @override
  void dispose() {
    // Hive.box(kHiveBoxName).compact();
    Hive.close();
    super.dispose();
  }

  // Retrieves records from the hive box.
  List<DuaCatergoryItem> _getTodoItems() {
    final box = Hive.box<DuaCatergoryItem>(kHiveBoxName);
    return box.values.toList();
  }

  // Inserts records to hive.
  // Note we don't need to explicitly set the primary key (id), it'll auto
  // increment.
  Future<void> _addTodoItem(DuaCatergoryItem todo) async {
    final box = Hive.box<DuaCatergoryItem>(kHiveBoxName);
    final int key = await box.add(todo);
    // Set the id field to the auto-incremented key.
    todo.id = key;
    await todo.save();
    print('Inserted: key=$key, value=$todo');
  }

  // Updates records in the db table.
  Future<void> _toggleTodoItem(DuaCatergoryItem todo) async {
    // Since class TodoItem extends HiveObject, update the record is very easy.
    // Note the `todo` must already been added to the hive box.
    todo.isDone = !todo.isDone;
    await todo.save();
    print('Updated: key=${todo.id}, value=$todo');
  }

  // Deletes records in the db table.
  Future<void> _deleteTodoItem(DuaCatergoryItem todo) async {
    // Since class TodoItem extends HiveObject, delete the object is very easy.
    // Note the `todo` must already been added to the hive box.
    await todo.delete();
    print('Delted: key=${todo.id}, value=$todo');
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<bool>(
      future: this.initDbFuture,
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return const Center(
            child: CircularProgressIndicator(),
          );
        }
        return Scaffold(
          // WatchBoxBuilder by hive_flutter can save us from writing a
          // StreamBuilder ourselves.
          body: ValueListenableBuilder<Box<DuaCatergoryItem>>(
            valueListenable: Hive.box<DuaCatergoryItem>(kHiveBoxName).listenable(),
            builder: (context, box, _) => ListView(
              children: <Widget>[
                for (DuaCatergoryItem item in box.values) _itemToListTile(item)
              ],
            ),
          ),
          floatingActionButton: _buildFloatingActionButton(),
        );
      },
    );
  }

  ListTile _itemToListTile(DuaCatergoryItem todo) => ListTile(
    title: Text(
      todo.name,
      style: TextStyle(
        fontStyle: todo.isDone ? FontStyle.italic : null,
        color: todo.isDone ? Colors.grey : null,
        decoration: todo.isDone ? TextDecoration.lineThrough : null,
      ),
    ),
    subtitle: Text('id=${todo.id}\ncreated at ${todo.createdAt}'),
    isThreeLine: true,
    leading: IconButton(
      icon: Icon(
        todo.isDone ? Icons.check_box : Icons.check_box_outline_blank,
      ),
      onPressed: () => _toggleTodoItem(todo),
    ),
    trailing: IconButton(
      icon: const Icon(Icons.delete),
      onPressed: () => _deleteTodoItem(todo),
    ),
  );

  FloatingActionButton _buildFloatingActionButton() {
    return FloatingActionButton(
      onPressed: () async {
        await _addTodoItem(
          DuaCatergoryItem(
            name: 'aa',
            duaNameList: [],
            time: 10,
            totalDua: 10,
          ),
        );
      },
      child: const Icon(Icons.add),
    );
  }
}